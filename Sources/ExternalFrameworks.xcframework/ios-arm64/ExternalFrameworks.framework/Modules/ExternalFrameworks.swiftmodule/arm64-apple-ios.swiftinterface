// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ExternalFrameworks
import Combine
import Compression
import CoreFoundation
import CoreGraphics
import CoreTelephony
import CoreText
import Foundation
import QuartzCore
import SQLite3
import StoreKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_hasMissingDesignatedInitializers public class Asset : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ExternalFrameworks.Asset : @unchecked Swift.Sendable {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageAsset : ExternalFrameworks.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension ExternalFrameworks.ImageAsset : @unchecked Swift.Sendable {
}
public enum DotLottieError : Swift.Error {
  case noDataLoaded
  case assetNotFound(name: Swift.String, bundle: Foundation.Bundle?)
  case loadingFromAssetNotSupported
  @available(*, deprecated, message: "Unused")
  case invalidFileFormat
  @available(*, deprecated, message: "Unused")
  case invalidData
  @available(*, deprecated, message: "Unused")
  case animationNotAvailable
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension QuartzCore.CALayer {
  @nonobjc public func logLayerTree(withIndent: Swift.Int = 0)
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
public typealias LottieCompletionBlock = (_ completed: Swift.Bool) -> Swift.Void
extension ExternalFrameworks.LottieColor : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ExternalFrameworks.LottieVector1D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LottieVector2D : Swift.Codable, Swift.Hashable, Swift.Sendable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExternalFrameworks.LottieVector2D, b: ExternalFrameworks.LottieVector2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ExternalFrameworks.LottieVector3D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ExternalFrameworks.LottieVector3D {
  public var pointValue: CoreFoundation.CGPoint {
    get
  }
  public var sizeValue: CoreFoundation.CGSize {
    get
  }
}
public enum LottieAnimationSource : Swift.Sendable {
  case lottieAnimation(ExternalFrameworks.LottieAnimation)
  case dotLottieFile(ExternalFrameworks.DotLottieFile)
}
extension ExternalFrameworks.LottieAnimation {
  final public var animationSource: ExternalFrameworks.LottieAnimationSource {
    get
  }
}
extension ExternalFrameworks.DotLottieFile {
  final public var animationSource: ExternalFrameworks.LottieAnimationSource {
    get
  }
}
public enum CoordinateSpace : Swift.Int, Swift.Codable, Swift.Sendable {
  case type2d
  case type3d
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class LottieAnimation : Swift.Codable, Swift.Sendable {
  required public init(from decoder: any Swift.Decoder) throws
  public init(dictionary: [Swift.String : Any]) throws
  final public let startFrame: ExternalFrameworks.AnimationFrameTime
  final public let endFrame: ExternalFrameworks.AnimationFrameTime
  final public let framerate: Swift.Double
  final public var markerNames: [Swift.String] {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension ExternalFrameworks.LottieAnimation {
  public typealias DownloadClosure = (ExternalFrameworks.LottieAnimation?) -> Swift.Void
  final public var duration: Foundation.TimeInterval {
    get
  }
  final public var bounds: CoreFoundation.CGRect {
    get
  }
  final public var size: CoreFoundation.CGSize {
    get
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared) -> ExternalFrameworks.LottieAnimation?
  public static func filepath(_ filepath: Swift.String, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared) -> ExternalFrameworks.LottieAnimation?
  public static func asset(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared) -> ExternalFrameworks.LottieAnimation?
  public static func from(data: Foundation.Data, strategy: ExternalFrameworks.DecodingStrategy = LottieConfiguration.shared.decodingStrategy) throws -> ExternalFrameworks.LottieAnimation
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared) async -> ExternalFrameworks.LottieAnimation?
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, closure: @escaping ExternalFrameworks.LottieAnimation.DownloadClosure, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared)
  final public func progressTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationFrameTime?
  final public func durationFrameTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationFrameTime?
  final public func progressTime(forFrame frameTime: ExternalFrameworks.AnimationFrameTime, clamped: Swift.Bool = true) -> ExternalFrameworks.AnimationProgressTime
  final public func frameTime(forProgress progressTime: ExternalFrameworks.AnimationProgressTime) -> ExternalFrameworks.AnimationFrameTime
  final public func time(forFrame frameTime: ExternalFrameworks.AnimationFrameTime) -> Foundation.TimeInterval
  final public func frameTime(forTime time: Foundation.TimeInterval) -> ExternalFrameworks.AnimationFrameTime
}
extension Foundation.Bundle : @unchecked Swift.Sendable {
}
@objc @_hasMissingDesignatedInitializers public class LottieAnimationLayer : QuartzCore.CALayer {
  public init(animation: ExternalFrameworks.LottieAnimation?, imageProvider: (any ExternalFrameworks.AnimationImageProvider)? = nil, textProvider: any ExternalFrameworks.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ExternalFrameworks.AnimationFontProvider = DefaultFontProvider(), configuration: ExternalFrameworks.LottieConfiguration = .shared, logger: ExternalFrameworks.LottieLogger = .shared)
  public init(dotLottie: ExternalFrameworks.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any ExternalFrameworks.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ExternalFrameworks.AnimationFontProvider = DefaultFontProvider(), configuration: ExternalFrameworks.LottieConfiguration = .shared, logger: ExternalFrameworks.LottieLogger = .shared)
  public init(configuration: ExternalFrameworks.LottieConfiguration = .shared, logger: ExternalFrameworks.LottieLogger = .shared)
  open func play(completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func play(fromProgress: ExternalFrameworks.AnimationProgressTime? = nil, toProgress: ExternalFrameworks.AnimationProgressTime, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func play(fromFrame: ExternalFrameworks.AnimationFrameTime? = nil, toFrame: ExternalFrameworks.AnimationFrameTime, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func play(marker: Swift.String, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func play(markers: [Swift.String], completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func stop()
  open func pause()
  open func pause(at state: ExternalFrameworks.LottiePlaybackMode.PausedState)
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  open func play(_ playbackMode: ExternalFrameworks.LottiePlaybackMode, animationCompletionHandler: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func setPlaybackMode(_ playbackMode: ExternalFrameworks.LottiePlaybackMode, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  open func play(_ playbackMode: ExternalFrameworks.LottiePlaybackMode.PlaybackMode, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  public var currentPlaybackMode: ExternalFrameworks.LottiePlaybackMode? {
    get
  }
  public var valueProviders: [ExternalFrameworks.AnimationKeypath : any ExternalFrameworks.AnyValueProvider] {
    get
  }
  public var animationLayerDidLoad: ((_ animationLayer: ExternalFrameworks.LottieAnimationLayer, _ renderingEngine: ExternalFrameworks.RenderingEngineOption) -> Swift.Void)?
  public var configuration: ExternalFrameworks.LottieConfiguration {
    get
    set
  }
  public var animationLayer: QuartzCore.CALayer? {
    get
  }
  public var screenScale: CoreFoundation.CGFloat {
    get
    set
  }
  public var backgroundBehavior: ExternalFrameworks.LottieBackgroundBehavior {
    get
    set
  }
  public var animation: ExternalFrameworks.LottieAnimation? {
    get
    set
  }
  public var animationLoaded: ((_ animationLayer: ExternalFrameworks.LottieAnimationLayer, _ animation: ExternalFrameworks.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  public var imageProvider: any ExternalFrameworks.AnimationImageProvider {
    get
    set
  }
  public var textProvider: any ExternalFrameworks.AnimationKeypathTextProvider {
    get
    set
  }
  public var fontProvider: any ExternalFrameworks.AnimationFontProvider {
    get
    set
  }
  public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  public var isAnimationPlaying: Swift.Bool {
    get
  }
  public var loopMode: ExternalFrameworks.LottieLoopMode {
    get
    set
  }
  public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  public var currentProgress: ExternalFrameworks.AnimationProgressTime {
    get
    set
  }
  public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  public var currentFrame: ExternalFrameworks.AnimationFrameTime {
    get
    set
  }
  public var realtimeAnimationFrame: ExternalFrameworks.AnimationFrameTime {
    get
  }
  public var realtimeAnimationProgress: ExternalFrameworks.AnimationProgressTime {
    get
  }
  public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  public var currentRenderingEngine: ExternalFrameworks.RenderingEngine? {
    get
  }
  public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: ExternalFrameworks.DotLottieFile)
  public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: ExternalFrameworks.DotLottieFile)
  public func reloadImages()
  public func forceDisplayUpdate()
  public func setValueProvider(_ valueProvider: any ExternalFrameworks.AnyValueProvider, keypath: ExternalFrameworks.AnimationKeypath)
  public func removeValueProvider(for keypath: ExternalFrameworks.AnimationKeypath)
  public func getValue(for keypath: ExternalFrameworks.AnimationKeypath, atFrame: ExternalFrameworks.AnimationFrameTime?) -> Any?
  public func getOriginalValue(for keypath: ExternalFrameworks.AnimationKeypath, atFrame: ExternalFrameworks.AnimationFrameTime?) -> Any?
  public func logHierarchyKeypaths()
  public func allHierarchyKeypaths() -> [Swift.String]
  public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: ExternalFrameworks.AnimationKeypath?) -> CoreFoundation.CGRect?
  public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: ExternalFrameworks.AnimationKeypath?) -> CoreFoundation.CGPoint?
  public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: ExternalFrameworks.AnimationKeypath)
  public func progressTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationProgressTime?
  public func frameTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationFrameTime?
  public func durationFrameTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationFrameTime?
  public func updateAnimationForBackgroundState()
  public func updateAnimationForForegroundState(wasWaitingToPlayAnimation: Swift.Bool)
  @objc deinit
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public static func `default`(for renderingEngine: ExternalFrameworks.RenderingEngine) -> ExternalFrameworks.LottieBackgroundBehavior
  public static func == (a: ExternalFrameworks.LottieBackgroundBehavior, b: ExternalFrameworks.LottieBackgroundBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieLoopMode : Swift.Hashable {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ExternalFrameworks.LottieLoopMode : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.LottieLoopMode, rhs: ExternalFrameworks.LottieLoopMode) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class LottieAnimationView : ExternalFrameworks.LottieAnimationViewBase {
  @_Concurrency.MainActor @preconcurrency public init(animation: ExternalFrameworks.LottieAnimation?, imageProvider: (any ExternalFrameworks.AnimationImageProvider)? = nil, textProvider: any ExternalFrameworks.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ExternalFrameworks.AnimationFontProvider = DefaultFontProvider(), configuration: ExternalFrameworks.LottieConfiguration = .shared, logger: ExternalFrameworks.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency public init(dotLottie: ExternalFrameworks.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any ExternalFrameworks.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ExternalFrameworks.AnimationFontProvider = DefaultFontProvider(), configuration: ExternalFrameworks.LottieConfiguration = .shared, logger: ExternalFrameworks.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency public init(configuration: ExternalFrameworks.LottieConfiguration = .shared, logger: ExternalFrameworks.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func play(_ mode: ExternalFrameworks.LottiePlaybackMode.PlaybackMode, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromProgress: ExternalFrameworks.AnimationProgressTime? = nil, toProgress: ExternalFrameworks.AnimationProgressTime, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromFrame: ExternalFrameworks.AnimationFrameTime? = nil, toFrame: ExternalFrameworks.AnimationFrameTime, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(marker: Swift.String, loopMode: ExternalFrameworks.LottieLoopMode? = nil, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(markers: [Swift.String], completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func stop()
  @_Concurrency.MainActor @preconcurrency open func pause()
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency open func play(_ playbackMode: ExternalFrameworks.LottiePlaybackMode, animationCompletionHandler: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func setPlaybackMode(_ playbackMode: ExternalFrameworks.LottiePlaybackMode, completion: ExternalFrameworks.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency public var animateLayoutChangesWithCurrentCoreAnimationContext: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var configuration: ExternalFrameworks.LottieConfiguration {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var valueProviders: [ExternalFrameworks.AnimationKeypath : any ExternalFrameworks.AnyValueProvider] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var backgroundBehavior: ExternalFrameworks.LottieBackgroundBehavior {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animation: ExternalFrameworks.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animationLoaded: ((_ animationView: ExternalFrameworks.LottieAnimationView, _ animation: ExternalFrameworks.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imageProvider: any ExternalFrameworks.AnimationImageProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textProvider: any ExternalFrameworks.AnimationKeypathTextProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var fontProvider: any ExternalFrameworks.AnimationFontProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isAnimationPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isAnimationQueued: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var loopMode: ExternalFrameworks.LottieLoopMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentProgress: ExternalFrameworks.AnimationProgressTime {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentFrame: ExternalFrameworks.AnimationFrameTime {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var realtimeAnimationFrame: ExternalFrameworks.AnimationFrameTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var realtimeAnimationProgress: ExternalFrameworks.AnimationProgressTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var viewportFrame: CoreFoundation.CGRect? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var currentRenderingEngine: ExternalFrameworks.RenderingEngine? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentPlaybackMode: ExternalFrameworks.LottiePlaybackMode? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: ExternalFrameworks.DotLottieFile)
  @_Concurrency.MainActor @preconcurrency public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: ExternalFrameworks.DotLottieFile)
  @_Concurrency.MainActor @preconcurrency public func reloadImages()
  @_Concurrency.MainActor @preconcurrency public func forceDisplayUpdate()
  @_Concurrency.MainActor @preconcurrency public func setValueProvider(_ valueProvider: any ExternalFrameworks.AnyValueProvider, keypath: ExternalFrameworks.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func removeValueProvider(for keypath: ExternalFrameworks.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func getValue(for keypath: ExternalFrameworks.AnimationKeypath, atFrame: ExternalFrameworks.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func getOriginalValue(for keypath: ExternalFrameworks.AnimationKeypath, atFrame: ExternalFrameworks.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func logHierarchyKeypaths()
  @_Concurrency.MainActor @preconcurrency public func allHierarchyKeypaths() -> [Swift.String]
  @_Concurrency.MainActor @preconcurrency public func addSubview(_ subview: ExternalFrameworks.AnimationSubview, forLayerAt keypath: ExternalFrameworks.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: ExternalFrameworks.AnimationKeypath?) -> CoreFoundation.CGRect?
  @_Concurrency.MainActor @preconcurrency public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: ExternalFrameworks.AnimationKeypath?) -> CoreFoundation.CGPoint?
  @_Concurrency.MainActor @preconcurrency public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: ExternalFrameworks.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func progressTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationProgressTime?
  @_Concurrency.MainActor @preconcurrency public func frameTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationFrameTime?
  @_Concurrency.MainActor @preconcurrency public func durationFrameTime(forMarker named: Swift.String) -> ExternalFrameworks.AnimationFrameTime?
  @objc deinit
}
extension ExternalFrameworks.LottieAnimationView {
  @_Concurrency.MainActor @preconcurrency convenience public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, imageProvider: (any ExternalFrameworks.AnimationImageProvider)? = nil, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ExternalFrameworks.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(filePath: Swift.String, imageProvider: (any ExternalFrameworks.AnimationImageProvider)? = nil, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ExternalFrameworks.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(url: Foundation.URL, imageProvider: (any ExternalFrameworks.AnimationImageProvider)? = nil, session: Foundation.URLSession = .shared, closure: @escaping ExternalFrameworks.LottieAnimationView.DownloadClosure, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ExternalFrameworks.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(asset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: (any ExternalFrameworks.AnimationImageProvider)? = nil, animationCache: (any ExternalFrameworks.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ExternalFrameworks.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieName name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationId: Swift.String? = nil, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ExternalFrameworks.LottieConfiguration = .shared, completion: ((ExternalFrameworks.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieFilePath filePath: Swift.String, animationId: Swift.String? = nil, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ExternalFrameworks.LottieConfiguration = .shared, completion: ((ExternalFrameworks.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieUrl url: Foundation.URL, animationId: Swift.String? = nil, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ExternalFrameworks.LottieConfiguration = .shared, session: Foundation.URLSession = .shared, completion: ((ExternalFrameworks.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieAsset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationId: Swift.String? = nil, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ExternalFrameworks.LottieConfiguration = .shared, completion: ((ExternalFrameworks.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  public typealias DownloadClosure = ((any Swift.Error)?) -> Swift.Void
}
public enum LottiePlaybackMode : Swift.Hashable {
  case paused(at: ExternalFrameworks.LottiePlaybackMode.PausedState)
  case playing(_: ExternalFrameworks.LottiePlaybackMode.PlaybackMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case progress(_: ExternalFrameworks.AnimationProgressTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case frame(_: ExternalFrameworks.AnimationFrameTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case time(_: Foundation.TimeInterval)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case pause
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromProgress(_: ExternalFrameworks.AnimationProgressTime?, toProgress: ExternalFrameworks.AnimationProgressTime, loopMode: ExternalFrameworks.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromFrame(_: ExternalFrameworks.AnimationFrameTime?, toFrame: ExternalFrameworks.AnimationFrameTime, loopMode: ExternalFrameworks.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ExternalFrameworks.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case marker(_: Swift.String, loopMode: ExternalFrameworks.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case markers(_: [Swift.String])
  public enum PausedState : Swift.Hashable {
    case currentFrame
    case progress(_: ExternalFrameworks.AnimationProgressTime)
    case frame(_: ExternalFrameworks.AnimationFrameTime)
    case time(_: Foundation.TimeInterval)
    case marker(_: Swift.String, position: ExternalFrameworks.LottieMarkerPosition = .start)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: ExternalFrameworks.LottiePlaybackMode.PausedState, b: ExternalFrameworks.LottiePlaybackMode.PausedState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlaybackMode : Swift.Hashable {
    case fromProgress(_: ExternalFrameworks.AnimationProgressTime?, toProgress: ExternalFrameworks.AnimationProgressTime, loopMode: ExternalFrameworks.LottieLoopMode)
    case fromFrame(_: ExternalFrameworks.AnimationFrameTime?, toFrame: ExternalFrameworks.AnimationFrameTime, loopMode: ExternalFrameworks.LottieLoopMode)
    case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ExternalFrameworks.LottieLoopMode)
    case marker(_: Swift.String, loopMode: ExternalFrameworks.LottieLoopMode)
    case markers(_: [Swift.String])
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: ExternalFrameworks.LottiePlaybackMode.PlaybackMode, b: ExternalFrameworks.LottiePlaybackMode.PlaybackMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExternalFrameworks.LottiePlaybackMode, b: ExternalFrameworks.LottiePlaybackMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ExternalFrameworks.LottiePlaybackMode {
  public static var paused: ExternalFrameworks.LottiePlaybackMode {
    get
  }
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toProgress(_ toProgress: ExternalFrameworks.AnimationProgressTime, loopMode: ExternalFrameworks.LottieLoopMode) -> ExternalFrameworks.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toFrame(_ toFrame: ExternalFrameworks.AnimationFrameTime, loopMode: ExternalFrameworks.LottieLoopMode) -> ExternalFrameworks.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ExternalFrameworks.LottieLoopMode) -> ExternalFrameworks.LottiePlaybackMode
}
extension ExternalFrameworks.LottiePlaybackMode.PlaybackMode {
  public static func toProgress(_ toProgress: ExternalFrameworks.AnimationProgressTime, loopMode: ExternalFrameworks.LottieLoopMode) -> ExternalFrameworks.LottiePlaybackMode.PlaybackMode
  public static func toFrame(_ toFrame: ExternalFrameworks.AnimationFrameTime, loopMode: ExternalFrameworks.LottieLoopMode) -> ExternalFrameworks.LottiePlaybackMode.PlaybackMode
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ExternalFrameworks.LottieLoopMode) -> ExternalFrameworks.LottiePlaybackMode.PlaybackMode
}
public enum LottieMarkerPosition : Swift.Hashable {
  case start
  case end
  public static func == (a: ExternalFrameworks.LottieMarkerPosition, b: ExternalFrameworks.LottieMarkerPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct LottieView<Placeholder> where Placeholder : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(animation: ExternalFrameworks.LottieAnimation?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(dotLottieFile: ExternalFrameworks.DotLottieFile?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ExternalFrameworks.LottieAnimation?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ExternalFrameworks.LottieAnimation?, @SwiftUICore.ViewBuilder placeholder: @escaping (() -> Placeholder))
  @_Concurrency.MainActor @preconcurrency public init(_ loadDotLottieFile: @escaping () async throws -> ExternalFrameworks.DotLottieFile?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadDotLottieFile: @escaping () async throws -> ExternalFrameworks.DotLottieFile?, @SwiftUICore.ViewBuilder placeholder: @escaping (() -> Placeholder))
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ExternalFrameworks.LottieAnimationSource?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ExternalFrameworks.LottieAnimationSource?, @SwiftUICore.ViewBuilder placeholder: @escaping () -> Placeholder)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure<Property>(_ property: Swift.ReferenceWritableKeyPath<ExternalFrameworks.LottieAnimationView, Property>, to value: Property) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func configure<Property>(_ property: Swift.ReferenceWritableKeyPath<ExternalFrameworks.LottieAnimationView, Property>, to value: Property) -> ExternalFrameworks.LottieView<Placeholder> where Property : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (ExternalFrameworks.LottieAnimationView) -> Swift.Void) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func resizable() -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func intrinsicSize() -> ExternalFrameworks.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing()", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play() -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func looping() -> ExternalFrameworks.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing(_:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play(loopMode: ExternalFrameworks.LottieLoopMode = .playOnce) -> ExternalFrameworks.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playbackMode(_:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play(_ playbackMode: ExternalFrameworks.LottiePlaybackMode) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing(_ mode: ExternalFrameworks.LottiePlaybackMode.PlaybackMode) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing(loopMode: ExternalFrameworks.LottieLoopMode) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing() -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func paused(at state: ExternalFrameworks.LottiePlaybackMode.PausedState = .currentFrame) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playbackMode(_ playbackMode: ExternalFrameworks.LottiePlaybackMode) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationSpeed(_ animationSpeed: Swift.Double) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationDidLoad(_ animationDidLoad: @escaping (ExternalFrameworks.LottieAnimationSource) -> Swift.Void) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationDidFinish(_ animationCompletionHandler: ExternalFrameworks.LottieCompletionBlock?) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func backgroundBehavior(_ value: ExternalFrameworks.LottieBackgroundBehavior) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func accessibilityLabel(_ accessibilityLabel: Swift.String?) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: ExternalFrameworks.LottieConfiguration) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func logger(_ logger: ExternalFrameworks.LottieLogger) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func imageProvider<ImageProvider>(_ imageProvider: ImageProvider) -> ExternalFrameworks.LottieView<Placeholder> where ImageProvider : ExternalFrameworks.AnimationImageProvider, ImageProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func textProvider<TextProvider>(_ textProvider: TextProvider) -> ExternalFrameworks.LottieView<Placeholder> where TextProvider : ExternalFrameworks.AnimationKeypathTextProvider, TextProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func fontProvider<FontProvider>(_ fontProvider: FontProvider) -> ExternalFrameworks.LottieView<Placeholder> where FontProvider : ExternalFrameworks.AnimationFontProvider, FontProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: ExternalFrameworks.AnimationKeypath) -> ExternalFrameworks.LottieView<Placeholder> where ValueProvider : ExternalFrameworks.AnyValueProvider, ValueProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func currentProgress(_ currentProgress: ExternalFrameworks.AnimationProgressTime?) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func currentFrame(_ currentFrame: ExternalFrameworks.AnimationFrameTime?) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func currentTime(_ currentTime: Foundation.TimeInterval?) -> ExternalFrameworks.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func reloadAnimationTrigger(_ value: some Equatable, showPlaceholder: Swift.Bool = true) -> ExternalFrameworks.LottieView<Placeholder>
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  @_Concurrency.MainActor @preconcurrency public func getRealtimeAnimationProgress(_ realtimeAnimationProgress: SwiftUICore.Binding<ExternalFrameworks.AnimationProgressTime>?) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  @_Concurrency.MainActor @preconcurrency public func getRealtimeAnimationFrame(_ realtimeAnimationFrame: SwiftUICore.Binding<ExternalFrameworks.AnimationFrameTime>?) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func dotLottieConfigurationComponents(_ dotLottieConfigurationComponents: ExternalFrameworks.DotLottieConfigurationComponents) -> ExternalFrameworks.LottieView<Placeholder>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s18ExternalFrameworks10LottieViewV4bodyQrvp", 0) __<Placeholder>
}
public protocol AnimationCacheProvider : AnyObject, Swift.Sendable {
  func animation(forKey: Swift.String) -> ExternalFrameworks.LottieAnimation?
  func setAnimation(_ animation: ExternalFrameworks.LottieAnimation, forKey: Swift.String)
  func clearCache()
}
public class DefaultAnimationCache : ExternalFrameworks.AnimationCacheProvider {
  public init()
  public static let sharedCache: ExternalFrameworks.DefaultAnimationCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func animation(forKey key: Swift.String) -> ExternalFrameworks.LottieAnimation?
  public func setAnimation(_ animation: ExternalFrameworks.LottieAnimation, forKey key: Swift.String)
  @objc deinit
}
extension ExternalFrameworks.DefaultAnimationCache : @unchecked Swift.Sendable {
}
public enum LottieAnimationCache {
  public static var shared: (any ExternalFrameworks.AnimationCacheProvider)?
}
@available(*, deprecated, message: "Use DefaultAnimationCache instead, which is thread-safe and automatically responds to memory pressure.")
public typealias LRUAnimationCache = ExternalFrameworks.DefaultAnimationCache
public enum DecodingStrategy : Swift.Hashable {
  case legacyCodable
  case dictionaryBased
  public static func == (a: ExternalFrameworks.DecodingStrategy, b: ExternalFrameworks.DecodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieConfiguration : Swift.Hashable {
  public init(renderingEngine: ExternalFrameworks.RenderingEngineOption = .automatic, decodingStrategy: ExternalFrameworks.DecodingStrategy = .dictionaryBased, colorSpace: CoreGraphics.CGColorSpace = CGColorSpaceCreateDeviceRGB(), reducedMotionOption: ExternalFrameworks.ReducedMotionOption = .systemReducedMotionToggle)
  public static var shared: ExternalFrameworks.LottieConfiguration
  public var renderingEngine: ExternalFrameworks.RenderingEngineOption
  public var decodingStrategy: ExternalFrameworks.DecodingStrategy
  public var reducedMotionOption: ExternalFrameworks.ReducedMotionOption
  public var colorSpace: CoreGraphics.CGColorSpace
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExternalFrameworks.LottieConfiguration, b: ExternalFrameworks.LottieConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReducedMotionOption {
  case specific(ExternalFrameworks.ReducedMotionMode)
  case dynamic(any ExternalFrameworks.ReducedMotionOptionProvider, dataID: Swift.AnyHashable)
}
extension ExternalFrameworks.ReducedMotionOption {
  public static var standardMotion: ExternalFrameworks.ReducedMotionOption {
    get
  }
  public static var reducedMotion: ExternalFrameworks.ReducedMotionOption {
    get
  }
  public static var systemReducedMotionToggle: ExternalFrameworks.ReducedMotionOption {
    get
  }
}
extension ExternalFrameworks.ReducedMotionOption {
  public var currentReducedMotionMode: ExternalFrameworks.ReducedMotionMode {
    get
  }
}
extension ExternalFrameworks.ReducedMotionOption : Swift.Hashable {
  public static func == (lhs: ExternalFrameworks.ReducedMotionOption, rhs: ExternalFrameworks.ReducedMotionOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReducedMotionMode : Swift.Hashable {
  case standardMotion
  case reducedMotion
  public static func == (a: ExternalFrameworks.ReducedMotionMode, b: ExternalFrameworks.ReducedMotionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ReducedMotionOptionProvider {
  var currentReducedMotionMode: ExternalFrameworks.ReducedMotionMode { get }
}
public struct SystemReducedMotionOptionProvider : ExternalFrameworks.ReducedMotionOptionProvider {
  public init()
  public var currentReducedMotionMode: ExternalFrameworks.ReducedMotionMode {
    get
  }
}
public enum RenderingEngineOption : Swift.Hashable {
  case automatic
  case specific(ExternalFrameworks.RenderingEngine)
  public static var mainThread: ExternalFrameworks.RenderingEngineOption {
    get
  }
  public static var coreAnimation: ExternalFrameworks.RenderingEngineOption {
    get
  }
}
public enum RenderingEngine : Swift.Hashable {
  case mainThread
  case coreAnimation
}
extension ExternalFrameworks.RenderingEngineOption : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension ExternalFrameworks.RenderingEngine : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AnimatedButton : ExternalFrameworks.AnimatedControl {
  @_Concurrency.MainActor @preconcurrency override public init(animation: ExternalFrameworks.LottieAnimation?, configuration: ExternalFrameworks.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency public var performAction: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func setPlayRange(fromProgress: ExternalFrameworks.AnimationProgressTime, toProgress: ExternalFrameworks.AnimationProgressTime, event: ExternalFrameworks.LottieControlEvent)
  @_Concurrency.MainActor @preconcurrency public func setPlayRange(fromMarker fromName: Swift.String, toMarker toName: Swift.String, event: ExternalFrameworks.LottieControlEvent)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class AnimatedControl : ExternalFrameworks.LottieControlType {
  @_Concurrency.MainActor @preconcurrency public init(animation: ExternalFrameworks.LottieAnimation?, configuration: ExternalFrameworks.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency open func animationDidSet()
  @_Concurrency.MainActor @preconcurrency final public let animationView: ExternalFrameworks.LottieAnimationView
  @_Concurrency.MainActor @preconcurrency public var animation: ExternalFrameworks.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setLayer(named: Swift.String, forState: ExternalFrameworks.LottieControlState)
  @_Concurrency.MainActor @preconcurrency public func setValueProvider(_ valueProvider: any ExternalFrameworks.AnyValueProvider, keypath: ExternalFrameworks.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func removeValueProvider(for keypath: ExternalFrameworks.AnimationKeypath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AnimatedSwitch : ExternalFrameworks.AnimatedControl {
  @_Concurrency.MainActor @preconcurrency override public init(animation: ExternalFrameworks.LottieAnimation?, configuration: ExternalFrameworks.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override open func animationDidSet()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  public enum CancelBehavior {
    case reverse
    case none
    public static func == (a: ExternalFrameworks.AnimatedSwitch.CancelBehavior, b: ExternalFrameworks.AnimatedSwitch.CancelBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var cancelBehavior: ExternalFrameworks.AnimatedSwitch.CancelBehavior
  @_Concurrency.MainActor @preconcurrency public var animateUpdateWhenChangingAnimation: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var stateUpdated: ((_ isOn: Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var isOn: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setIsOn(_ isOn: Swift.Bool, animated: Swift.Bool, shouldFireHaptics: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func setProgressForState(fromProgress: ExternalFrameworks.AnimationProgressTime, toProgress: ExternalFrameworks.AnimationProgressTime, forOnState: Swift.Bool)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct LottieButton {
  @_Concurrency.MainActor @preconcurrency public init(animation: ExternalFrameworks.LottieAnimation?, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (ExternalFrameworks.AnimatedButton) -> Swift.Void) -> ExternalFrameworks.LottieButton
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: ExternalFrameworks.LottieConfiguration) -> ExternalFrameworks.LottieButton
  @_Concurrency.MainActor @preconcurrency public func animate(fromProgress: ExternalFrameworks.AnimationProgressTime, toProgress: ExternalFrameworks.AnimationProgressTime, on event: ExternalFrameworks.LottieControlEvent) -> ExternalFrameworks.LottieButton
  @_Concurrency.MainActor @preconcurrency public func animate(fromMarker: Swift.String, toMarker: Swift.String, on event: ExternalFrameworks.LottieControlEvent) -> ExternalFrameworks.LottieButton
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: ExternalFrameworks.AnimationKeypath) -> ExternalFrameworks.LottieButton where ValueProvider : ExternalFrameworks.AnyValueProvider, ValueProvider : Swift.Equatable
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s18ExternalFrameworks12LottieButtonV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct LottieSwitch {
  @_Concurrency.MainActor @preconcurrency public init(animation: ExternalFrameworks.LottieAnimation?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (ExternalFrameworks.AnimatedSwitch) -> Swift.Void) -> ExternalFrameworks.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: ExternalFrameworks.LottieConfiguration) -> ExternalFrameworks.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func isOn(_ binding: SwiftUICore.Binding<Swift.Bool>) -> ExternalFrameworks.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func onAnimation(fromProgress onStartProgress: ExternalFrameworks.AnimationProgressTime, toProgress onEndProgress: ExternalFrameworks.AnimationProgressTime) -> ExternalFrameworks.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func offAnimation(fromProgress offStartProgress: ExternalFrameworks.AnimationProgressTime, toProgress offEndProgress: ExternalFrameworks.AnimationProgressTime) -> ExternalFrameworks.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: ExternalFrameworks.AnimationKeypath) -> ExternalFrameworks.LottieSwitch where ValueProvider : ExternalFrameworks.AnyValueProvider, ValueProvider : Swift.Equatable
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s18ExternalFrameworks12LottieSwitchV4bodyQrvp", 0) __
}
public typealias LottieControlType = UIKit.UIControl
public typealias LottieControlState = UIKit.UIControl.State
public typealias LottieControlEvent = UIKit.UIControl.Event
public class DotLottieCache : ExternalFrameworks.DotLottieCacheProvider {
  public init()
  public static let sharedCache: ExternalFrameworks.DotLottieCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func file(forKey key: Swift.String) -> ExternalFrameworks.DotLottieFile?
  public func setFile(_ lottie: ExternalFrameworks.DotLottieFile, forKey key: Swift.String)
  @objc deinit
}
extension ExternalFrameworks.DotLottieCache : @unchecked Swift.Sendable {
}
public protocol DotLottieCacheProvider : Swift.Sendable {
  func file(forKey: Swift.String) -> ExternalFrameworks.DotLottieFile?
  func setFile(_ lottie: ExternalFrameworks.DotLottieFile, forKey: Swift.String)
  func clearCache()
}
public struct DotLottieConfiguration {
  public var id: Swift.String
  public var loopMode: ExternalFrameworks.LottieLoopMode
  public var speed: Swift.Double
  public var imageProvider: (any ExternalFrameworks.AnimationImageProvider)? {
    get
  }
}
public struct DotLottieConfigurationComponents : Swift.OptionSet {
  public init(rawValue: Swift.Int)
  public static let imageProvider: ExternalFrameworks.DotLottieConfigurationComponents
  public static let loopMode: ExternalFrameworks.DotLottieConfigurationComponents
  public static let animationSpeed: ExternalFrameworks.DotLottieConfigurationComponents
  public static let all: ExternalFrameworks.DotLottieConfigurationComponents
  public static let none: ExternalFrameworks.DotLottieConfigurationComponents
  public let rawValue: Swift.Int
  public typealias ArrayLiteralElement = ExternalFrameworks.DotLottieConfigurationComponents
  public typealias Element = ExternalFrameworks.DotLottieConfigurationComponents
  public typealias RawValue = Swift.Int
}
@_hasMissingDesignatedInitializers final public class DotLottieFile {
  public struct Animation {
    public let animation: ExternalFrameworks.LottieAnimation
    public let configuration: ExternalFrameworks.DotLottieConfiguration
  }
  final public var animations: [ExternalFrameworks.DotLottieFile.Animation] {
    get
  }
  @objc deinit
}
extension ExternalFrameworks.DotLottieFile : @unchecked Swift.Sendable {
}
extension ExternalFrameworks.DotLottieFile {
  public enum SynchronouslyBlockingCurrentThread {
    public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>
    public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>
    public static func loadedFrom(data: Foundation.Data, filename: Swift.String) -> Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ExternalFrameworks.DotLottieFile
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ExternalFrameworks.DotLottieFile
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ExternalFrameworks.DotLottieFile
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ExternalFrameworks.DotLottieFile
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any ExternalFrameworks.DotLottieCacheProvider)? = DotLottieCache.sharedCache, handleResult: @escaping (Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ExternalFrameworks.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie) async throws -> ExternalFrameworks.DotLottieFile
}
extension Dispatch.DispatchQueue {
  public static let dotLottie: Dispatch.DispatchQueue
}
final public class ColorValueProvider {
  public init(block: @escaping ExternalFrameworks.ColorValueProvider.ColorValueBlock)
  public init(_ color: ExternalFrameworks.LottieColor)
  public init(_ keyframes: [ExternalFrameworks.Keyframe<ExternalFrameworks.LottieColor>])
  public typealias ColorValueBlock = (CoreFoundation.CGFloat) -> ExternalFrameworks.LottieColor
  final public var color: ExternalFrameworks.LottieColor {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ExternalFrameworks.ValueProviderStorage<ExternalFrameworks.LottieColor> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ExternalFrameworks.ColorValueProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.ColorValueProvider, rhs: ExternalFrameworks.ColorValueProvider) -> Swift.Bool
}
final public class FloatValueProvider {
  public init(block: @escaping ExternalFrameworks.FloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ExternalFrameworks.ValueProviderStorage<ExternalFrameworks.LottieVector1D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ExternalFrameworks.FloatValueProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.FloatValueProvider, rhs: ExternalFrameworks.FloatValueProvider) -> Swift.Bool
}
final public class GradientValueProvider {
  public init(block: @escaping ExternalFrameworks.GradientValueProvider.ColorsValueBlock, locations: ExternalFrameworks.GradientValueProvider.ColorLocationsBlock? = nil)
  public init(_ colors: [ExternalFrameworks.LottieColor], locations: [Swift.Double] = [])
  public typealias ColorsValueBlock = (CoreFoundation.CGFloat) -> [ExternalFrameworks.LottieColor]
  public typealias ColorLocationsBlock = (CoreFoundation.CGFloat) -> [Swift.Double]
  final public var colors: [ExternalFrameworks.LottieColor] {
    get
    set
  }
  final public var locations: [Swift.Double] {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ExternalFrameworks.ValueProviderStorage<[Swift.Double]> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ExternalFrameworks.GradientValueProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.GradientValueProvider, rhs: ExternalFrameworks.GradientValueProvider) -> Swift.Bool
}
final public class PointValueProvider {
  public init(block: @escaping ExternalFrameworks.PointValueProvider.PointValueBlock)
  public init(_ point: CoreFoundation.CGPoint)
  public typealias PointValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  final public var point: CoreFoundation.CGPoint {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ExternalFrameworks.ValueProviderStorage<ExternalFrameworks.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ExternalFrameworks.PointValueProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.PointValueProvider, rhs: ExternalFrameworks.PointValueProvider) -> Swift.Bool
}
final public class SizeValueProvider {
  public init(block: @escaping ExternalFrameworks.SizeValueProvider.SizeValueBlock)
  public init(_ size: CoreFoundation.CGSize)
  public typealias SizeValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  final public var size: CoreFoundation.CGSize {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ExternalFrameworks.ValueProviderStorage<ExternalFrameworks.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ExternalFrameworks.SizeValueProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.SizeValueProvider, rhs: ExternalFrameworks.SizeValueProvider) -> Swift.Bool
}
public struct AnimationKeypath : Swift.Hashable, Swift.ExpressibleByStringLiteral {
  public init(keypath: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(keys: [Swift.String])
  public var keys: [Swift.String] {
    get
  }
  public var string: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExternalFrameworks.AnimationKeypath, b: ExternalFrameworks.AnimationKeypath) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnyValueProvider {
  var valueType: any Any.Type { get }
  var typeErasedStorage: ExternalFrameworks.AnyValueProviderStorage { get }
  func hasUpdate(frame: ExternalFrameworks.AnimationFrameTime) -> Swift.Bool
}
extension ExternalFrameworks.AnyValueProvider {
  public func value(frame: ExternalFrameworks.AnimationFrameTime) -> Any
}
public enum ValueProviderStorage<T> where T : ExternalFrameworks.AnyInterpolatable {
  case singleValue(T)
  case keyframes([ExternalFrameworks.Keyframe<T>])
  case closure((ExternalFrameworks.AnimationFrameTime) -> T)
}
public enum AnyValueProviderStorage {
  case singleValue(Any)
  case keyframes([ExternalFrameworks.Keyframe<Any>], interpolate: (ExternalFrameworks.AnimationFrameTime) -> Any)
  case closure((ExternalFrameworks.AnimationFrameTime) -> Any)
}
public protocol AnimationFontProvider {
  func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
}
final public class DefaultFontProvider : ExternalFrameworks.AnimationFontProvider {
  public init()
  final public func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
  @objc deinit
}
extension ExternalFrameworks.DefaultFontProvider : Swift.Equatable {
  public static func == (_: ExternalFrameworks.DefaultFontProvider, _: ExternalFrameworks.DefaultFontProvider) -> Swift.Bool
}
public protocol AnimationImageProvider {
  var cacheEligible: Swift.Bool { get }
  func imageForAsset(asset: ExternalFrameworks.ImageAsset) -> CoreGraphics.CGImage?
  func contentsGravity(for asset: ExternalFrameworks.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
extension ExternalFrameworks.AnimationImageProvider {
  public var cacheEligible: Swift.Bool {
    get
  }
  public func contentsGravity(for _: ExternalFrameworks.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
@objc final public class CompatibleAnimationKeypath : ObjectiveC.NSObject {
  @objc public init(keypath: Swift.String)
  @objc public init(keys: [Swift.String])
  final public let animationKeypath: ExternalFrameworks.AnimationKeypath
  @objc deinit
}
@objc final public class CompatibleAnimation : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, subdirectory: Swift.String? = nil, bundle: Foundation.Bundle = Bundle.main)
  @objc deinit
}
@objc public enum CompatibleRenderingEngineOption : Swift.Int {
  case shared
  case defaultEngine
  case automatic
  case mainThread
  case coreAnimation
  public static func generateLottieConfiguration(_ configuration: ExternalFrameworks.CompatibleRenderingEngineOption) -> ExternalFrameworks.LottieConfiguration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CompatibleBackgroundBehavior : Swift.Int {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class CompatibleAnimationView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(compatibleAnimation: ExternalFrameworks.CompatibleAnimation)
  @objc @_Concurrency.MainActor @preconcurrency public init(compatibleAnimation: ExternalFrameworks.CompatibleAnimation, compatibleRenderingEngineOption: ExternalFrameworks.CompatibleRenderingEngineOption)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(url: Foundation.URL)
  @objc @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL, compatibleRenderingEngineOption: ExternalFrameworks.CompatibleRenderingEngineOption)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(data: Foundation.Data)
  @objc @_Concurrency.MainActor @preconcurrency public init(data: Foundation.Data, compatibleRenderingEngineOption: ExternalFrameworks.CompatibleRenderingEngineOption)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency final public var compatibleAnimation: ExternalFrameworks.CompatibleAnimation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var loopAnimationCount: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var compatibleDictionaryTextProvider: ExternalFrameworks.CompatibleDictionaryTextProvider? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var shouldRasterizeWhenIdle: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var currentProgress: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var duration: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var currentTime: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var currentFrame: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var realtimeAnimationFrame: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var realtimeAnimationProgress: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var animationSpeed: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var respectAnimationFrameRate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var isAnimationPlaying: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var backgroundMode: ExternalFrameworks.CompatibleBackgroundBehavior {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public func play()
  @objc @_Concurrency.MainActor @preconcurrency final public func play(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(fromProgress: CoreFoundation.CGFloat, toProgress: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(fromFrame: CoreFoundation.CGFloat, toFrame: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(fromMarker: Swift.String, toMarker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func play(marker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency final public func stop()
  @objc @_Concurrency.MainActor @preconcurrency final public func pause()
  @objc @_Concurrency.MainActor @preconcurrency final public func reloadImages()
  @objc @_Concurrency.MainActor @preconcurrency final public func forceDisplayUpdate()
  @objc @_Concurrency.MainActor @preconcurrency final public func getValue(for keypath: ExternalFrameworks.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> Any?
  @objc @_Concurrency.MainActor @preconcurrency final public func logHierarchyKeypaths()
  @objc @_Concurrency.MainActor @preconcurrency final public func setColorValue(_ color: UIKit.UIColor, forKeypath keypath: ExternalFrameworks.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor @preconcurrency final public func getColorValue(for keypath: ExternalFrameworks.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency final public func addSubview(_ subview: ExternalFrameworks.AnimationSubview, forLayerAt keypath: ExternalFrameworks.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor @preconcurrency final public func convert(rect: CoreFoundation.CGRect, toLayerAt keypath: ExternalFrameworks.CompatibleAnimationKeypath?) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor @preconcurrency final public func convert(point: CoreFoundation.CGPoint, toLayerAt keypath: ExternalFrameworks.CompatibleAnimationKeypath?) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor @preconcurrency final public func progressTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency final public func frameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency final public func durationFrameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc final public class CompatibleDictionaryTextProvider : ObjectiveC.NSObject {
  @objc public init(values: [Swift.String : Swift.String])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class AnimationSubview : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class BundleImageProvider : ExternalFrameworks.AnimationImageProvider {
  public init(bundle: Foundation.Bundle, searchPath: Swift.String?, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: ExternalFrameworks.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: ExternalFrameworks.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension ExternalFrameworks.BundleImageProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.BundleImageProvider, rhs: ExternalFrameworks.BundleImageProvider) -> Swift.Bool
}
public class FilepathImageProvider : ExternalFrameworks.AnimationImageProvider {
  public init(filepath: Swift.String, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public init(filepath: Foundation.URL, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: ExternalFrameworks.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: ExternalFrameworks.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension ExternalFrameworks.FilepathImageProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.FilepathImageProvider, rhs: ExternalFrameworks.FilepathImageProvider) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class LottieAnimationViewBase : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  public var lottieColorValue: ExternalFrameworks.LottieColor {
    get
  }
}
public protocol Interpolatable : ExternalFrameworks.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
public protocol SpatialInterpolatable : ExternalFrameworks.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
public protocol AnyInterpolatable {
  func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension ExternalFrameworks.Interpolatable {
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent _: CoreFoundation.CGPoint?, spatialInTangent _: CoreFoundation.CGPoint?) -> Self
}
extension ExternalFrameworks.SpatialInterpolatable {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension Swift.Double : ExternalFrameworks.Interpolatable {
}
extension CoreFoundation.CGFloat : ExternalFrameworks.Interpolatable {
}
extension Swift.Float : ExternalFrameworks.Interpolatable {
}
extension ExternalFrameworks.Interpolatable where Self : Swift.BinaryFloatingPoint {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
extension CoreFoundation.CGRect : ExternalFrameworks.Interpolatable {
  public func interpolate(to: CoreFoundation.CGRect, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGSize : ExternalFrameworks.Interpolatable {
  public func interpolate(to: CoreFoundation.CGSize, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
extension CoreFoundation.CGPoint : ExternalFrameworks.SpatialInterpolatable {
  public func interpolate(to: CoreFoundation.CGPoint, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> CoreFoundation.CGPoint
}
extension ExternalFrameworks.LottieColor : ExternalFrameworks.Interpolatable {
  public func interpolate(to: ExternalFrameworks.LottieColor, amount: CoreFoundation.CGFloat) -> ExternalFrameworks.LottieColor
}
extension ExternalFrameworks.LottieVector1D : ExternalFrameworks.Interpolatable {
  public func interpolate(to: ExternalFrameworks.LottieVector1D, amount: CoreFoundation.CGFloat) -> ExternalFrameworks.LottieVector1D
}
extension ExternalFrameworks.LottieVector2D : ExternalFrameworks.SpatialInterpolatable {
  public func interpolate(to: ExternalFrameworks.LottieVector2D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> ExternalFrameworks.LottieVector2D
}
extension ExternalFrameworks.LottieVector3D : ExternalFrameworks.SpatialInterpolatable {
  public func interpolate(to: ExternalFrameworks.LottieVector3D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> ExternalFrameworks.LottieVector3D
}
extension Swift.Array : ExternalFrameworks.Interpolatable, ExternalFrameworks.AnyInterpolatable where Element : ExternalFrameworks.Interpolatable {
  public func interpolate(to: [Element], amount: CoreFoundation.CGFloat) -> [Element]
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : ExternalFrameworks.Interpolatable, ExternalFrameworks.AnyInterpolatable where Wrapped : ExternalFrameworks.Interpolatable {
  public func interpolate(to: Wrapped?, amount: CoreFoundation.CGFloat) -> Wrapped?
}
#else
extension Swift.Optional : ExternalFrameworks.Interpolatable, ExternalFrameworks.AnyInterpolatable where Wrapped : ExternalFrameworks.Interpolatable {
  public func interpolate(to: Wrapped?, amount: CoreFoundation.CGFloat) -> Wrapped?
}
#endif
final public class Keyframe<T> {
  public init(_ value: T, spatialInTangent: ExternalFrameworks.LottieVector3D? = nil, spatialOutTangent: ExternalFrameworks.LottieVector3D? = nil)
  public init(value: T, time: ExternalFrameworks.AnimationFrameTime, isHold: Swift.Bool = false, inTangent: ExternalFrameworks.LottieVector2D? = nil, outTangent: ExternalFrameworks.LottieVector2D? = nil, spatialInTangent: ExternalFrameworks.LottieVector3D? = nil, spatialOutTangent: ExternalFrameworks.LottieVector3D? = nil)
  final public let value: T
  final public let time: ExternalFrameworks.AnimationFrameTime
  final public let isHold: Swift.Bool
  final public let inTangent: ExternalFrameworks.LottieVector2D?
  final public let outTangent: ExternalFrameworks.LottieVector2D?
  final public let spatialInTangent: ExternalFrameworks.LottieVector3D?
  final public let spatialOutTangent: ExternalFrameworks.LottieVector3D?
  @objc deinit
}
extension ExternalFrameworks.Keyframe : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.Keyframe<T>, rhs: ExternalFrameworks.Keyframe<T>) -> Swift.Bool
}
extension ExternalFrameworks.Keyframe : Swift.Hashable where T : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension ExternalFrameworks.Keyframe : Swift.Sendable where T : Swift.Sendable {
}
final public class LottieLogger {
  public init(assert: @escaping ExternalFrameworks.LottieLogger.Assert = { condition, message, file, line in
       
       
       
      Swift.assert(condition(), message(), file: file, line: line)
    }, assertionFailure: @escaping ExternalFrameworks.LottieLogger.AssertionFailure = { message, file, line in
       
       
       
       
      Swift.assertionFailure(message(), file: file, line: line)
    }, warn: @escaping ExternalFrameworks.LottieLogger.Warn = { message, _, _ in
    }, info: @escaping ExternalFrameworks.LottieLogger.Info = { message in
    })
  public typealias Assert = (_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias AssertionFailure = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Warn = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Info = (_ message: @autoclosure () -> Swift.String) -> Swift.Void
  public static var shared: ExternalFrameworks.LottieLogger
  final public func assert(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func assertionFailure(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func warn(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func info(_ message: @autoclosure () -> Swift.String = String())
  @objc deinit
}
extension ExternalFrameworks.LottieLogger {
  public static var printToConsole: ExternalFrameworks.LottieLogger {
    get
  }
}
public typealias AnimationFrameTime = CoreFoundation.CGFloat
public typealias AnimationProgressTime = CoreFoundation.CGFloat
public enum ColorFormatDenominator : Swift.Hashable {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: ExternalFrameworks.ColorFormatDenominator, b: ExternalFrameworks.ColorFormatDenominator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieColor : Swift.Hashable {
  public var r: Swift.Double
  public var g: Swift.Double
  public var b: Swift.Double
  public var a: Swift.Double
  public init(r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double, denominator: ExternalFrameworks.ColorFormatDenominator = .One)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExternalFrameworks.LottieColor, b: ExternalFrameworks.LottieColor) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieVector1D : Swift.Hashable, Swift.Sendable {
  public init(_ value: Swift.Double)
  public let value: Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExternalFrameworks.LottieVector1D, b: ExternalFrameworks.LottieVector1D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieVector3D : Swift.Hashable, Swift.Sendable {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.Double
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExternalFrameworks.LottieVector3D, b: ExternalFrameworks.LottieVector3D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnimationKeypathTextProvider : AnyObject {
  func text(for keypath: ExternalFrameworks.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
}
@available(*, deprecated, message: "`AnimationKeypathTextProvider` has been deprecated and renamed to `LegacyAnimationTextProvider`. Instead, conform to `AnimationKeypathTextProvider` instead or conform to `LegacyAnimationTextProvider` explicitly.")
public typealias AnimationTextProvider = ExternalFrameworks.LegacyAnimationTextProvider
public protocol LegacyAnimationTextProvider : ExternalFrameworks.AnimationKeypathTextProvider {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
extension ExternalFrameworks.LegacyAnimationTextProvider {
  public func text(for _: ExternalFrameworks.AnimationKeypath, sourceText _: Swift.String) -> Swift.String?
}
final public class DictionaryTextProvider : ExternalFrameworks.AnimationKeypathTextProvider, ExternalFrameworks.LegacyAnimationTextProvider {
  public init(_ values: [Swift.String : Swift.String])
  final public func text(for keypath: ExternalFrameworks.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension ExternalFrameworks.DictionaryTextProvider : Swift.Equatable {
  public static func == (lhs: ExternalFrameworks.DictionaryTextProvider, rhs: ExternalFrameworks.DictionaryTextProvider) -> Swift.Bool
}
final public class DefaultTextProvider : ExternalFrameworks.AnimationKeypathTextProvider, ExternalFrameworks.LegacyAnimationTextProvider {
  public init()
  final public func textFor(keypathName _: Swift.String, sourceText: Swift.String) -> Swift.String
  final public func text(for _: ExternalFrameworks.AnimationKeypath, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension ExternalFrameworks.DefaultTextProvider : Swift.Equatable {
  public static func == (_: ExternalFrameworks.DefaultTextProvider, _: ExternalFrameworks.DefaultTextProvider) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class Mixpanel {
  @discardableResult
  open class func initialize(token apiToken: Swift.String, trackAutomaticEvents: Swift.Bool, flushInterval: Swift.Double = 60, instanceName: Swift.String? = nil, optOutTrackingByDefault: Swift.Bool = false, useUniqueDistinctId: Swift.Bool = false, superProperties: ExternalFrameworks.Properties? = nil, serverURL: Swift.String? = nil) -> ExternalFrameworks.MixpanelInstance
  @discardableResult
  open class func initialize(token apiToken: Swift.String, trackAutomaticEvents: Swift.Bool, flushInterval: Swift.Double = 60, instanceName: Swift.String? = nil, optOutTrackingByDefault: Swift.Bool = false, useUniqueDistinctId: Swift.Bool = false, superProperties: ExternalFrameworks.Properties? = nil, proxyServerConfig: ExternalFrameworks.ProxyServerConfig) -> ExternalFrameworks.MixpanelInstance
  open class func getInstance(name: Swift.String) -> ExternalFrameworks.MixpanelInstance?
  open class func mainInstance() -> ExternalFrameworks.MixpanelInstance
  open class func setMainInstance(name: Swift.String)
  open class func removeInstance(name: Swift.String)
  @objc deinit
}
public protocol MixpanelProxyServerDelegate : AnyObject {
  func mixpanelResourceForProxyServer(_ name: Swift.String) -> ExternalFrameworks.ServerProxyResource?
}
public protocol MixpanelDelegate : AnyObject {
  func mixpanelWillFlush(_ mixpanel: ExternalFrameworks.MixpanelInstance) -> Swift.Bool
}
public typealias Properties = [Swift.String : any ExternalFrameworks.MixpanelType]
public struct ProxyServerConfig {
  public init?(serverUrl: Swift.String, delegate: (any ExternalFrameworks.MixpanelProxyServerDelegate)? = nil)
}
@_hasMissingDesignatedInitializers open class MixpanelInstance : Swift.CustomDebugStringConvertible {
  open var apiToken: Swift.String
  weak open var delegate: (any ExternalFrameworks.MixpanelDelegate)?
  open var distinctId: Swift.String
  open var anonymousId: Swift.String?
  open var userId: Swift.String?
  open var hadPersistedDistinctId: Swift.Bool?
  open var alias: Swift.String?
  open var people: ExternalFrameworks.People!
  open var showNetworkActivityIndicator: Swift.Bool
  open var trackAutomaticEventsEnabled: Swift.Bool
  open var flushInterval: Swift.Double {
    get
    set
  }
  open var flushOnBackground: Swift.Bool {
    get
    set
  }
  open var useIPAddressForGeoLocation: Swift.Bool {
    get
    set
  }
  open var flushBatchSize: Swift.Int {
    get
    set
  }
  open var serverURL: Swift.String {
    get
    set
  }
  weak open var proxyServerDelegate: (any ExternalFrameworks.MixpanelProxyServerDelegate)?
  open var debugDescription: Swift.String {
    get
  }
  open var loggingEnabled: Swift.Bool {
    get
    set
  }
  final public let name: Swift.String
  open var minimumSessionDuration: Swift.UInt64 {
    get
    set
  }
  open var maximumSessionDuration: Swift.UInt64 {
    get
    set
  }
  @objc deinit
}
extension ExternalFrameworks.MixpanelInstance {
  public func identify(distinctId: Swift.String, usePeople: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func createAlias(_ alias: Swift.String, distinctId: Swift.String, usePeople: Swift.Bool = true, andIdentify: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func reset(completion: (() -> Swift.Void)? = nil)
}
extension ExternalFrameworks.MixpanelInstance {
  public func archive()
}
extension ExternalFrameworks.MixpanelInstance {
  public func flush(performFullFlush: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
}
extension ExternalFrameworks.MixpanelInstance {
  public func track(event: Swift.String?, properties: ExternalFrameworks.Properties? = nil)
  public func trackWithGroups(event: Swift.String?, properties: ExternalFrameworks.Properties? = nil, groups: ExternalFrameworks.Properties?)
  public func getGroup(groupKey: Swift.String, groupID: any ExternalFrameworks.MixpanelType) -> ExternalFrameworks.MPGroup
  public func time(event: Swift.String)
  public func eventElapsedTime(event: Swift.String) -> Swift.Double
  public func clearTimedEvents()
  public func clearTimedEvent(event: Swift.String)
  public func currentSuperProperties() -> [Swift.String : Any]
  public func clearSuperProperties()
  public func registerSuperProperties(_ properties: ExternalFrameworks.Properties)
  public func registerSuperPropertiesOnce(_ properties: ExternalFrameworks.Properties, defaultValue: (any ExternalFrameworks.MixpanelType)? = nil)
  public func unregisterSuperProperty(_ propertyName: Swift.String)
  public func setGroup(groupKey: Swift.String, groupID: any ExternalFrameworks.MixpanelType)
  public func setGroup(groupKey: Swift.String, groupIDs: [any ExternalFrameworks.MixpanelType])
  public func addGroup(groupKey: Swift.String, groupID: any ExternalFrameworks.MixpanelType)
  public func removeGroup(groupKey: Swift.String, groupID: any ExternalFrameworks.MixpanelType)
  public func optOutTracking()
  public func optInTracking(distinctId: Swift.String? = nil, properties: ExternalFrameworks.Properties? = nil)
  public func hasOptedOutTracking() -> Swift.Bool
}
public protocol MixpanelType {
  func isValidNestedTypeAndValue() -> Swift.Bool
  func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
#else
extension Swift.Optional : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
#endif
extension Swift.String : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Foundation.NSString : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Foundation.NSNumber : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Swift.Int : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Swift.UInt : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Swift.Double : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Swift.Float : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Swift.Bool : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Foundation.Date : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Foundation.URL : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Foundation.NSNull : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Swift.Array : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Foundation.NSArray : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
extension Swift.Dictionary : ExternalFrameworks.MixpanelType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any ExternalFrameworks.MixpanelType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class MPGroup {
  open func set(properties: ExternalFrameworks.Properties)
  open func set(property: Swift.String, to: any ExternalFrameworks.MixpanelType)
  open func setOnce(properties: ExternalFrameworks.Properties)
  open func unset(property: Swift.String)
  open func remove(key: Swift.String, value: any ExternalFrameworks.MixpanelType)
  open func union(key: Swift.String, values: [any ExternalFrameworks.MixpanelType])
  open func deleteGroup()
  @objc deinit
}
public struct ServerProxyResource {
  public init(queryItems: [Foundation.URLQueryItem]? = nil, headers: [Swift.String : Swift.String])
  public let queryItems: [Foundation.URLQueryItem]?
  public let headers: [Swift.String : Swift.String]
}
@_hasMissingDesignatedInitializers open class People {
  open var ignoreTime: Swift.Bool
  open func set(properties: ExternalFrameworks.Properties)
  open func set(property: Swift.String, to: any ExternalFrameworks.MixpanelType)
  open func setOnce(properties: ExternalFrameworks.Properties)
  open func unset(properties: [Swift.String])
  open func increment(properties: ExternalFrameworks.Properties)
  open func increment(property: Swift.String, by: Swift.Double)
  open func append(properties: ExternalFrameworks.Properties)
  open func remove(properties: ExternalFrameworks.Properties)
  open func union(properties: ExternalFrameworks.Properties)
  open func trackCharge(amount: Swift.Double, properties: ExternalFrameworks.Properties? = nil)
  open func clearCharges()
  open func deleteUser()
  @objc deinit
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ExternalFrameworks.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: ExternalFrameworks.JSON) throws
  public func merged(with other: ExternalFrameworks.JSON) throws -> ExternalFrameworks.JSON
  public var type: ExternalFrameworks.`Type` {
    get
  }
  public var error: ExternalFrameworks.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: ExternalFrameworks.JSON {
    get
  }
  public static var null: ExternalFrameworks.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: ExternalFrameworks.Index<T>, rhs: ExternalFrameworks.Index<T>) -> Swift.Bool
  public static func < (lhs: ExternalFrameworks.Index<T>, rhs: ExternalFrameworks.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = ExternalFrameworks.Index<ExternalFrameworks.JSON>
public typealias JSONRawIndex = ExternalFrameworks.Index<Any>
extension ExternalFrameworks.JSON : Swift.Collection {
  public typealias Index = ExternalFrameworks.JSONRawIndex
  public var startIndex: ExternalFrameworks.JSON.Index {
    get
  }
  public var endIndex: ExternalFrameworks.JSON.Index {
    get
  }
  public func index(after i: ExternalFrameworks.JSON.Index) -> ExternalFrameworks.JSON.Index
  public subscript(position: ExternalFrameworks.JSON.Index) -> (Swift.String, ExternalFrameworks.JSON) {
    get
  }
  public typealias Element = (Swift.String, ExternalFrameworks.JSON)
  public typealias Indices = Swift.DefaultIndices<ExternalFrameworks.JSON>
  public typealias Iterator = Swift.IndexingIterator<ExternalFrameworks.JSON>
  public typealias SubSequence = Swift.Slice<ExternalFrameworks.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: ExternalFrameworks.JSONKey { get }
}
extension Swift.Int : ExternalFrameworks.JSONSubscriptType {
  public var jsonKey: ExternalFrameworks.JSONKey {
    get
  }
}
extension Swift.String : ExternalFrameworks.JSONSubscriptType {
  public var jsonKey: ExternalFrameworks.JSONKey {
    get
  }
}
extension ExternalFrameworks.JSON {
  public subscript(path: [any ExternalFrameworks.JSONSubscriptType]) -> ExternalFrameworks.JSON {
    get
    set
  }
  public subscript(path: any ExternalFrameworks.JSONSubscriptType...) -> ExternalFrameworks.JSON {
    get
    set
  }
}
extension ExternalFrameworks.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension ExternalFrameworks.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension ExternalFrameworks.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension ExternalFrameworks.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension ExternalFrameworks.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension ExternalFrameworks.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension ExternalFrameworks.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [ExternalFrameworks.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension ExternalFrameworks.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension ExternalFrameworks.JSON {
  public var array: [ExternalFrameworks.JSON]? {
    get
  }
  public var arrayValue: [ExternalFrameworks.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension ExternalFrameworks.JSON {
  public var dictionary: [Swift.String : ExternalFrameworks.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : ExternalFrameworks.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension ExternalFrameworks.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension ExternalFrameworks.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension ExternalFrameworks.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension ExternalFrameworks.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension ExternalFrameworks.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension ExternalFrameworks.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension ExternalFrameworks.JSON : Swift.Comparable {
}
public func == (lhs: ExternalFrameworks.JSON, rhs: ExternalFrameworks.JSON) -> Swift.Bool
public func <= (lhs: ExternalFrameworks.JSON, rhs: ExternalFrameworks.JSON) -> Swift.Bool
public func >= (lhs: ExternalFrameworks.JSON, rhs: ExternalFrameworks.JSON) -> Swift.Bool
public func > (lhs: ExternalFrameworks.JSON, rhs: ExternalFrameworks.JSON) -> Swift.Bool
public func < (lhs: ExternalFrameworks.JSON, rhs: ExternalFrameworks.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: ExternalFrameworks.writingOptionsKeys, b: ExternalFrameworks.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ExternalFrameworks.JSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ExternalFrameworks.LayerType : Swift.Equatable {}
extension ExternalFrameworks.LayerType : Swift.Hashable {}
extension ExternalFrameworks.LayerType : Swift.RawRepresentable {}
extension ExternalFrameworks.MatteType : Swift.Equatable {}
extension ExternalFrameworks.MatteType : Swift.Hashable {}
extension ExternalFrameworks.MatteType : Swift.RawRepresentable {}
extension ExternalFrameworks.BlendMode : Swift.Equatable {}
extension ExternalFrameworks.BlendMode : Swift.Hashable {}
extension ExternalFrameworks.BlendMode : Swift.RawRepresentable {}
extension ExternalFrameworks.CoordinateSpace : Swift.Equatable {}
extension ExternalFrameworks.CoordinateSpace : Swift.Hashable {}
extension ExternalFrameworks.CoordinateSpace : Swift.RawRepresentable {}
extension ExternalFrameworks.LottieBackgroundBehavior : Swift.Equatable {}
extension ExternalFrameworks.LottieBackgroundBehavior : Swift.Hashable {}
extension ExternalFrameworks.LottieView : SwiftUICore.View {}
extension ExternalFrameworks.LottieView : Swift.Sendable {}
extension ExternalFrameworks.AnimatedSwitch.CancelBehavior : Swift.Equatable {}
extension ExternalFrameworks.AnimatedSwitch.CancelBehavior : Swift.Hashable {}
extension ExternalFrameworks.LottieButton : SwiftUICore.View {}
extension ExternalFrameworks.LottieButton : Swift.Sendable {}
extension ExternalFrameworks.LottieSwitch : SwiftUICore.View {}
extension ExternalFrameworks.LottieSwitch : Swift.Sendable {}
extension ExternalFrameworks.ColorValueProvider : ExternalFrameworks.AnyValueProvider {}
extension ExternalFrameworks.FloatValueProvider : ExternalFrameworks.AnyValueProvider {}
extension ExternalFrameworks.GradientValueProvider : ExternalFrameworks.AnyValueProvider {}
extension ExternalFrameworks.PointValueProvider : ExternalFrameworks.AnyValueProvider {}
extension ExternalFrameworks.SizeValueProvider : ExternalFrameworks.AnyValueProvider {}
extension ExternalFrameworks.CompatibleRenderingEngineOption : Swift.Equatable {}
extension ExternalFrameworks.CompatibleRenderingEngineOption : Swift.Hashable {}
extension ExternalFrameworks.CompatibleRenderingEngineOption : Swift.RawRepresentable {}
extension ExternalFrameworks.CompatibleBackgroundBehavior : Swift.Equatable {}
extension ExternalFrameworks.CompatibleBackgroundBehavior : Swift.Hashable {}
extension ExternalFrameworks.CompatibleBackgroundBehavior : Swift.RawRepresentable {}
extension ExternalFrameworks.SwiftyJSONError : Swift.Equatable {}
extension ExternalFrameworks.SwiftyJSONError : Swift.Hashable {}
extension ExternalFrameworks.SwiftyJSONError : Swift.RawRepresentable {}
extension ExternalFrameworks.`Type` : Swift.Equatable {}
extension ExternalFrameworks.`Type` : Swift.Hashable {}
extension ExternalFrameworks.`Type` : Swift.RawRepresentable {}
extension ExternalFrameworks.writingOptionsKeys : Swift.Equatable {}
extension ExternalFrameworks.writingOptionsKeys : Swift.Hashable {}
