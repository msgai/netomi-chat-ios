// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Netomi
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import AWSIoT
import AudioToolbox
import CoreGraphics
import DeveloperToolsSupport
import ExternalFrameworks
import Foundation
import MobileCoreServices
@_exported import Netomi
import PhotosUI
import SafariServices
import Swift
import SwiftUI
import SystemConfiguration
import UIKit.UIColor
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum NCWFloatingButtonPosition {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  case custom(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
}
public struct NCWBotConfiguration {
  public var quickReplyTextColor: UIKit.UIColor!
  public var quickReplyBorderColor: UIKit.UIColor!
  public var textColor: UIKit.UIColor!
  public var backgroundColor: UIKit.UIColor!
  public var quickReplyBackgroundColor: UIKit.UIColor!
  public var botImage: UIKit.UIImage?
  public var isFeedbackEnabled: Swift.Bool
  public init(withDefaultValues: Swift.Bool = false)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor final public class NetomiChat : ObjectiveC.NSObject {
  @_Concurrency.MainActor public static let shared: Netomi.NetomiChat
  @_Concurrency.MainActor final public func initialize(botRefId: Swift.String, env: Netomi.NCWEnvironment)
  @_Concurrency.MainActor final public func launch(jwt: Swift.String? = nil, errorHandler: ((Netomi.NCWErrorData) -> Swift.Void)? = nil)
  @_Concurrency.MainActor final public func setFCMToken(_ token: Swift.String)
  @_Concurrency.MainActor final public func sendCustomParameter(name: Swift.String, value: Swift.String)
  @_Concurrency.MainActor final public func updateApiHeaderConfiguration(headers: [Swift.String : Swift.String])
  @objc deinit
}
extension Netomi.NetomiChat {
  @_Concurrency.MainActor final public func updateHeaderConfiguration(config: Netomi.NCWHeaderConfiguration)
  @_Concurrency.MainActor final public func updateFooterConfiguration(config: Netomi.NCWFooterConfiguration)
  @_Concurrency.MainActor final public func updateBotConfiguration(config: Netomi.NCWBotConfiguration)
  @_Concurrency.MainActor final public func updateUserConfiguration(config: Netomi.NCWUserConfiguration)
  @_Concurrency.MainActor final public func updateBubbleConfiguration(config: Netomi.NCWBubbleConfiguration)
  @_Concurrency.MainActor final public func updateChatWindowConfiguration(config: Netomi.NCWChatWindowConfiguration)
  @_Concurrency.MainActor final public func updateOtherConfiguration(config: Netomi.NCWOtherConfiguration)
}
public struct NCWOtherConfiguration {
  public var titleColor: UIKit.UIColor!
  public var descriptionColor: UIKit.UIColor!
  public var backgroundColor: UIKit.UIColor!
  public init(withDefaultValues: Swift.Bool = false)
}
public protocol ViewModelLoader {
  var viewModel: ObjectiveC.NSObject! { get set }
}
public struct NCWHeaderConfiguration {
  public var backgroundColor: UIKit.UIColor!
  public var tintColor: UIKit.UIColor!
  public var iconBackgroundColor: UIKit.UIColor!
  public var titleFont: UIKit.UIFont!
  public var support: UIKit.UIImage!
  public var dismiss: UIKit.UIImage!
  public var navigationIcon: UIKit.UIImage?
  public var gradientColor: [Swift.String]!
  public var isGradientAppied: Swift.Bool!
  public var isBackPressPopupEnabed: Swift.Bool!
  public var prefersLargeTitles: Swift.Bool!
  public init(withDefaultValues: Swift.Bool = false)
}
public struct NCWFooterConfiguration {
  public var backgroundColor: UIKit.UIColor!
  public var tintColor: UIKit.UIColor!
  public var inputBoxBackgroundColor: UIKit.UIColor!
  public var inputBoxTextColor: UIKit.UIColor!
  public var isFooterHidden: Swift.Bool!
  public var isNetomiBrandingEnabled: Swift.Bool!
  public var netomiBrandingText: Swift.String!
  public var netomiBrandingTextColor: UIKit.UIColor!
  public var sendButtonColor: UIKit.UIColor!
  public var sendBackgroundColor: UIKit.UIColor!
  public var typingMessageCornerRadius: CoreFoundation.CGFloat
  public init(withDefaultValues: Swift.Bool = false)
}
public struct NCWChatWindowConfiguration {
  public var chatWindowBackgroundColor: UIKit.UIColor!
  public init(withDefaultValues: Swift.Bool = false)
}
public struct NCWUserConfiguration {
  public var quickReplyTextColor: UIKit.UIColor!
  public var quickReplyBorderColor: UIKit.UIColor!
  public var textColor: UIKit.UIColor!
  public var backgroundColor: UIKit.UIColor!
  public var quickReplyBackgroundColor: UIKit.UIColor!
  public var retryColor: UIKit.UIColor
  public init(withDefaultValues: Swift.Bool = false)
}
public struct NCWFloatingConfiguration {
}
public struct NCWBubbleConfiguration {
  public var borderRadius: CoreFoundation.CGFloat!
  public var timeStampColor: UIKit.UIColor!
  public init(withDefaultValues: Swift.Bool = false)
}
public struct HTTPHeaders : Swift.Sendable {
  public init()
  public init(_ headers: [Netomi.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: Netomi.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: Netomi.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> Netomi.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension Netomi.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension Netomi.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Netomi.HTTPHeader...)
  public typealias ArrayLiteralElement = Netomi.HTTPHeader
}
public struct HTTPHeader : Swift.Hashable, Swift.Sendable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Netomi.HTTPHeader, b: Netomi.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Netomi.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct NCWErrorData : Swift.Error, Swift.Decodable, Swift.Sendable {
  public var type: Swift.String?
  public var statusCode: Swift.Int?
  public var statusMessage: Swift.String?
  public var error: Swift.String?
  public var exceptionCode: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String {
  public var localized: Swift.String {
    get
  }
  public var enLocalized: Swift.String {
    get
  }
}
public enum NCWEnvironment : Swift.String {
  case Development
  case QA
  case QAInternal
  case USProd
  case SGProd
  case EUProd
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class InfoPlistReader {
  public static func loadInfoPlist() -> [Swift.String : Any]?
  @objc deinit
}
extension Netomi.NetomiChat : Swift.Sendable {}
extension Netomi.NCWEnvironment : Swift.Equatable {}
extension Netomi.NCWEnvironment : Swift.Hashable {}
extension Netomi.NCWEnvironment : Swift.RawRepresentable {}
